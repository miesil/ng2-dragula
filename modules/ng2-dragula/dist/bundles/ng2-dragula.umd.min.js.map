{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://ng2-dragula/Group.ts","ng://ng2-dragula/EventTypes.ts","ng://ng2-dragula/DrakeFactory.ts","ng://ng2-dragula/components/dragula.service.ts","ng://ng2-dragula/components/dragula.directive.ts","ng://ng2-dragula/components/dragula.module.ts","ng://ng2-dragula/MockDrake.ts"],"names":["__read","o","n","m","Symbol","iterator","r","e","i","call","ar","next","done","push","value","error","Group","name","drake","options","this","Cancel","Cloned","Drag","DragEnd","Drop","Out","Over","Remove","Shadow","DropModel","RemoveModel","AllEvents","Object","keys","EventTypes","map","k","dragula","( /** @type {?} */(dragulaExpt)).default","dragulaExpt","DrakeFactory","build","filterEvent","eventType","filterDragType","projector","input","pipe","filter","_a","event","undefined","args","elContainerSourceProjector","_b","el","container","source","DragulaService","drakeFactory","_this","Subject","groupName","dispatch$","target","sibling","elContainerSource","clone","original","cloneType","item","sourceModel","targetModel","sourceIndex","targetIndex","prototype","add","group","find","Error","groups","handleModels","setupEvents","destroy","createGroup","dragElm","dragIndex","dropIndex","on","models","containers","indexOf","slice","splice","domIndexOf","dropElm","isCopying","copyItem","removeChild","initEvents","forEach","_i","arguments","length","child","parent","Array","children","Injectable","decorators","type","Optional","DragulaDirective","dragulaService","EventEmitter","nativeElement","ngOnChanges","changes","prev","previousValue","current","currentValue","hasNewValue","firstChange","teardown","setup","dragulaModel","prevIndex","subscribe","subs","Subscription","dropModel","dragulaModelChange","emit","removeModel","unsubscribe","itemToRemove","modelIndex","ngOnDestroy","Directive","selector","ElementRef","Input","Output","DragulaModule","forRoot","ngModule","providers","NgModule","exports","declarations","MockDrakeFactory","MockDrake","start","dragging","end","cancel","revert","remove","callback","emitter$","apply","__spread","concat"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { DrakeWithModels } from \"./DrakeWithModels\";\r\nimport { DragulaOptions } from \"./DragulaOptions\";\r\n\r\nexport class Group {\r\n  public initEvents: boolean = false;\r\n  constructor(\r\n    public name: string,\r\n    public drake: DrakeWithModels,\r\n    public options: DragulaOptions\r\n  ) {}\r\n}\r\n","export enum EventTypes {\r\n    Cancel = \"cancel\",\r\n    Cloned = \"cloned\",\r\n    Drag = \"drag\",\r\n    DragEnd = \"dragend\",\r\n    Drop = \"drop\",\r\n    Out = \"out\",\r\n    Over = \"over\",\r\n    Remove = \"remove\",\r\n    Shadow = \"shadow\",\r\n    DropModel = \"dropModel\",\r\n    RemoveModel = \"removeModel\",\r\n}\r\n\r\nexport const AllEvents: EventTypes[] = Object.keys(EventTypes).map(k => EventTypes[k as any] as EventTypes);\r\n\r\n\r\n","import { DragulaOptions } from './DragulaOptions';\r\nimport { DrakeWithModels } from './DrakeWithModels';\r\nimport * as dragulaExpt from 'dragula';\r\nexport const dragula: (containers?: any, options?: any) => any = (dragulaExpt as any).default || dragulaExpt;\r\n\r\nexport type DrakeBuilder = (containers: any[], options: DragulaOptions) => DrakeWithModels;\r\n\r\nexport class DrakeFactory {\r\n  constructor (public build: DrakeBuilder = dragula) {}\r\n}\r\n\r\n","import { Injectable, Optional } from '@angular/core';\r\nimport { Group } from '../Group';\r\nimport { DragulaOptions } from '../DragulaOptions';\r\nimport { Subject, Observable } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\nimport { EventTypes, AllEvents } from '../EventTypes';\r\nimport { DrakeFactory } from '../DrakeFactory';\r\n\r\ntype FilterProjector<T extends { name: string; }> = (name: string, args: any[]) => T;\r\ntype Dispatch = { event: EventTypes; name: string; args: any[]; };\r\n\r\nconst filterEvent = <T extends { name: string; }>(\r\n  eventType: EventTypes,\r\n  filterDragType: string | undefined,\r\n  projector: FilterProjector<T>\r\n) => (input: Observable<Dispatch>): Observable<T> => {\r\n  return input.pipe(\r\n    filter(({ event, name }) => {\r\n      return event === eventType\r\n          && (filterDragType === undefined || name === filterDragType);\r\n    }),\r\n    map(({ name, args }) => projector(name, args))\r\n  );\r\n}\r\n\r\nconst elContainerSourceProjector =\r\n  (name: string, [el, container, source]: [Element, Element, Element]) =>\r\n    ({ name, el, container, source });\r\n\r\n@Injectable()\r\nexport class DragulaService {\r\n\r\n  /* https://github.com/bevacqua/dragula#drakeon-events */\r\n\r\n  private dispatch$ = new Subject<Dispatch>();\r\n\r\n  public drag = (groupName?: string) => this.dispatch$.pipe(\r\n    filterEvent(\r\n      EventTypes.Drag,\r\n      groupName,\r\n      (name, [el, source]: [Element, Element]) => ({ name, el, source })\r\n    )\r\n  );\r\n\r\n  public dragend = (groupName?: string) => this.dispatch$.pipe(\r\n    filterEvent(\r\n      EventTypes.DragEnd,\r\n      groupName,\r\n      (name, [el]: [Element]) => ({ name, el })\r\n    )\r\n  );\r\n\r\n  public drop = (groupName?: string) => this.dispatch$.pipe(\r\n    filterEvent(\r\n      EventTypes.Drop,\r\n      groupName,\r\n      (name, [\r\n        el, target, source, sibling\r\n      ]: [Element, Element, Element, Element]) => {\r\n        return { name, el, target, source, sibling };\r\n      })\r\n  );\r\n\r\n  private elContainerSource =\r\n    (eventType: EventTypes) =>\r\n    (groupName?: string) =>\r\n    this.dispatch$.pipe(\r\n      filterEvent(eventType, groupName, elContainerSourceProjector)\r\n    );\r\n\r\n  public cancel = this.elContainerSource(EventTypes.Cancel);\r\n  public remove = this.elContainerSource(EventTypes.Remove);\r\n  public shadow = this.elContainerSource(EventTypes.Shadow);\r\n  public over = this.elContainerSource(EventTypes.Over);\r\n  public out = this.elContainerSource(EventTypes.Out);\r\n\r\n  public cloned = (groupName?: string) => this.dispatch$.pipe(\r\n    filterEvent(\r\n      EventTypes.Cloned,\r\n      groupName,\r\n      (name, [\r\n        clone, original, cloneType\r\n      ]: [Element, Element, 'mirror' | 'copy']) => {\r\n        return { name, clone, original, cloneType }\r\n      })\r\n  );\r\n\r\n  public dropModel = <T = any>(groupName?: string) => this.dispatch$.pipe(\r\n    filterEvent(\r\n      EventTypes.DropModel,\r\n      groupName,\r\n      (name, [\r\n        el, target, source, sibling, item, sourceModel, targetModel, sourceIndex, targetIndex\r\n      ]: [Element, Element, Element, Element, T, T[], T[], number, number]) => {\r\n        return { name, el, target, source, sibling, item, sourceModel, targetModel, sourceIndex, targetIndex }\r\n      })\r\n  );\r\n\r\n  public removeModel = <T = any>(groupName?: string) => this.dispatch$.pipe(\r\n    filterEvent(\r\n      EventTypes.RemoveModel,\r\n      groupName,\r\n      (name, [\r\n        el, container, source, item, sourceModel, sourceIndex\r\n      ]: [Element, Element, Element, T, T[], number]) => {\r\n        return { name, el, container, source, item, sourceModel, sourceIndex }\r\n      }\r\n    )\r\n  );\r\n\r\n  private groups: { [k: string]: Group } = {};\r\n\r\n  constructor (@Optional() private drakeFactory: DrakeFactory = null) {\r\n    if (this.drakeFactory === null) {\r\n      this.drakeFactory = new DrakeFactory();\r\n    }\r\n  }\r\n\r\n  /** Public mainly for testing purposes. Prefer `createGroup()`. */\r\n  public add(group: Group): Group {\r\n    let existingGroup = this.find(group.name);\r\n    if (existingGroup) {\r\n      throw new Error('Group named: \"' + group.name + '\" already exists.');\r\n    }\r\n    this.groups[group.name] = group;\r\n    this.handleModels(group);\r\n    this.setupEvents(group);\r\n    return group;\r\n  }\r\n\r\n  public find(name: string): Group {\r\n    return this.groups[name];\r\n  }\r\n\r\n  public destroy(name: string): void {\r\n    let group = this.find(name);\r\n    if (!group) {\r\n      return;\r\n    }\r\n    group.drake && group.drake.destroy();\r\n    delete this.groups[name];\r\n  }\r\n\r\n  /**\r\n   * Creates a group with the specified name and options.\r\n   *\r\n   * Note: formerly known as `setOptions`\r\n   */\r\n  public createGroup<T = any>(name: string, options: DragulaOptions<T>): Group {\r\n    return this.add(new Group(\r\n      name,\r\n      this.drakeFactory.build([], options),\r\n      options\r\n    ));\r\n  }\r\n\r\n  private handleModels({ name, drake, options }: Group): void {\r\n    let dragElm: any;\r\n    let dragIndex: number;\r\n    let dropIndex: number;\r\n    drake.on('remove', (el: any, container: any, source: any) => {\r\n      if (!drake.models) {\r\n        return;\r\n      }\r\n      let sourceModel = drake.models[drake.containers.indexOf(source)];\r\n      sourceModel = sourceModel.slice(0); // clone it\r\n      const item = sourceModel.splice(dragIndex, 1)[0];\r\n      // console.log('REMOVE');\r\n      // console.log(sourceModel);\r\n      this.dispatch$.next({\r\n        event: EventTypes.RemoveModel,\r\n        name,\r\n        args: [ el, container, source, item, sourceModel, dragIndex ]\r\n      });\r\n    });\r\n    drake.on('drag', (el: any, source: any) => {\r\n      if (!drake.models) {\r\n        return;\r\n      }\r\n      dragElm = el;\r\n      dragIndex = this.domIndexOf(el, source);\r\n    });\r\n    drake.on('drop', (dropElm: any, target: Element, source: Element, sibling?: Element) => {\r\n      if (!drake.models || !target) {\r\n        return;\r\n      }\r\n      dropIndex = this.domIndexOf(dropElm, target);\r\n      let sourceModel = drake.models[drake.containers.indexOf(source)];\r\n      let targetModel = drake.models[drake.containers.indexOf(target)];\r\n      // console.log('DROP');\r\n      // console.log(sourceModel);\r\n      let item: any;\r\n      if (target === source) {\r\n        sourceModel = sourceModel.slice(0)\r\n        item = sourceModel.splice(dragIndex, 1)[0];\r\n        sourceModel.splice(dropIndex, 0, item);\r\n        // this was true before we cloned and updated sourceModel,\r\n        // but targetModel still has the old value\r\n        targetModel = sourceModel;\r\n      } else {\r\n        let isCopying = dragElm !== dropElm;\r\n        item = sourceModel[dragIndex];\r\n        if (isCopying) {\r\n          if (!options.copyItem) {\r\n            throw new Error(\"If you have enabled `copy` on a group, you must provide a `copyItem` function.\")\r\n          }\r\n          item = options.copyItem(item);\r\n        }\r\n\r\n        if (!isCopying) {\r\n          sourceModel = sourceModel.slice(0)\r\n          sourceModel.splice(dragIndex, 1);\r\n        }\r\n        targetModel = targetModel.slice(0)\r\n        targetModel.splice(dropIndex, 0, item);\r\n        if (isCopying) {\r\n          try {\r\n            target.removeChild(dropElm);\r\n          } catch (e) {}\r\n        }\r\n      }\r\n      this.dispatch$.next({\r\n        event: EventTypes.DropModel,\r\n        name,\r\n        args: [ dropElm, target, source, sibling, item, sourceModel, targetModel, dragIndex, dropIndex ]\r\n      });\r\n    });\r\n  }\r\n\r\n  private setupEvents(group: Group): void {\r\n    if (group.initEvents) {\r\n      return;\r\n    }\r\n    group.initEvents = true;\r\n    const name = group.name;\r\n    let that: any = this;\r\n    let emitter = (event: EventTypes) => {\r\n      group.drake.on(event, (...args: any[]) => {\r\n        this.dispatch$.next({ event, name, args });\r\n      });\r\n    };\r\n    AllEvents.forEach(emitter);\r\n  }\r\n\r\n  private domIndexOf(child: any, parent: any): any {\r\n    return Array.prototype.indexOf.call(parent.children, child);\r\n  }\r\n}\r\n","import { Directive, Input, Output, ElementRef, OnInit, OnChanges, OnDestroy, SimpleChange, EventEmitter } from '@angular/core';\r\nimport { DragulaService } from './dragula.service';\r\nimport { DrakeWithModels } from '../DrakeWithModels';\r\nimport { Subscription } from 'rxjs';\r\nimport { Group } from '../Group';\r\n\r\n@Directive({selector: '[dragula]'})\r\nexport class DragulaDirective implements OnChanges, OnDestroy {\r\n  @Input() public dragula: string;\r\n  @Input() public dragulaModel: any[];\r\n  @Output() public dragulaModelChange = new EventEmitter<any[]>();\r\n\r\n  private subs: Subscription;\r\n\r\n  private get container(): HTMLElement {\r\n    return this.el && this.el.nativeElement;\r\n  }\r\n  private group: Group;\r\n\r\n  public constructor(private el: ElementRef, private dragulaService: DragulaService) {\r\n  }\r\n\r\n  public ngOnChanges(changes: {dragula?: SimpleChange, dragulaModel?: SimpleChange}): void {\r\n    if (changes && changes.dragula) {\r\n      const { previousValue: prev, currentValue: current, firstChange } = changes.dragula;\r\n      let hadPreviousValue = !!prev;\r\n      let hasNewValue = !!current;\r\n      // something -> null       =>  teardown only\r\n      // something -> something  =>  teardown, then setup\r\n      //      null -> something  =>  setup only\r\n      //\r\n      //      null -> null (precluded by fact of change being present)\r\n      if (hadPreviousValue) {\r\n        this.teardown(prev);\r\n      }\r\n      if (hasNewValue) {\r\n        this.setup();\r\n      }\r\n    } else if (changes && changes.dragulaModel) {\r\n      // this code only runs when you're not changing the group name\r\n      // because if you're changing the group name, you'll be doing setup or teardown\r\n      // it also only runs if there is a group name to attach to.\r\n      const { previousValue: prev, currentValue: current, firstChange } = changes.dragulaModel;\r\n      const { drake } = this.group;\r\n      if (this.dragula && drake) {\r\n        drake.models = drake.models || [];\r\n        let prevIndex = drake.models.indexOf(prev);\r\n        if (prevIndex !== -1) {\r\n          // delete the previous\r\n          drake.models.splice(prevIndex, 1);\r\n          // maybe insert a new one at the same spot\r\n          if (!!current) {\r\n            drake.models.splice(prevIndex, 0, current);\r\n          }\r\n        } else if (!!current) {\r\n          // no previous one to remove; just push this one.\r\n          drake.models.push(current);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // call ngOnInit 'setup' because we want to call it in ngOnChanges\r\n  // and it would otherwise run twice\r\n  public setup(): void {\r\n    let checkModel = (group: Group) => {\r\n      if (this.dragulaModel) {\r\n        if (group.drake.models) {\r\n          group.drake.models.push(this.dragulaModel);\r\n        } else {\r\n          group.drake.models = [this.dragulaModel];\r\n        }\r\n      }\r\n    };\r\n\r\n    // find or create a group\r\n    let group = this.dragulaService.find(this.dragula);\r\n    if (!group) {\r\n      let options = {};\r\n      group = this.dragulaService.createGroup(this.dragula, options);\r\n    }\r\n\r\n    // ensure model and container element are pushed\r\n    checkModel(group);\r\n    group.drake.containers.push(this.container);\r\n    this.subscribe(this.dragula);\r\n\r\n    this.group = group;\r\n  }\r\n\r\n  public subscribe(name: string) {\r\n    this.subs = new Subscription();\r\n    this.subs.add(\r\n      this.dragulaService\r\n      .dropModel(name)\r\n      .subscribe(({ source, target, sourceModel, targetModel }) => {\r\n        if (source === this.el.nativeElement) {\r\n          this.dragulaModelChange.emit(sourceModel);\r\n        } else if (target === this.el.nativeElement) {\r\n          this.dragulaModelChange.emit(targetModel);\r\n        }\r\n      })\r\n    );\r\n    this.subs.add(\r\n      this.dragulaService\r\n      .removeModel(name)\r\n      .subscribe(({ source, sourceModel }) => {\r\n        if (source === this.el.nativeElement) {\r\n          this.dragulaModelChange.emit(sourceModel);\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  public teardown(groupName: string): void {\r\n    if (this.subs) {\r\n      this.subs.unsubscribe();\r\n    }\r\n    const group = this.dragulaService.find(groupName);\r\n    if (group) {\r\n      const itemToRemove = group.drake.containers.indexOf(this.el.nativeElement);\r\n      if (itemToRemove !== -1) {\r\n        group.drake.containers.splice(itemToRemove, 1);\r\n      }\r\n      if (this.dragulaModel && group.drake && group.drake.models) {\r\n        let modelIndex = group.drake.models.indexOf(this.dragulaModel);\r\n        if (modelIndex !== -1) {\r\n          group.drake.models.splice(modelIndex, 1);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public ngOnDestroy(): void {\r\n    this.teardown(this.dragula);\r\n  }\r\n\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { DragulaDirective } from './dragula.directive';\r\nimport { DragulaService } from './dragula.service';\r\n\r\n@NgModule({\r\n  exports: [DragulaDirective],\r\n  declarations: [DragulaDirective],\r\n})\r\nexport class DragulaModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: DragulaModule,\r\n      providers: [DragulaService]\r\n    }\r\n  }\r\n}\r\n","import { Subject, Subscription } from 'rxjs';\r\nimport { DrakeWithModels } from './DrakeWithModels';\r\nimport { filter } from 'rxjs/operators';\r\nimport { EventTypes } from './EventTypes';\r\nimport { DragulaOptions } from './DragulaOptions';\r\nimport { DrakeFactory } from './DrakeFactory';\r\n\r\nexport const MockDrakeFactory = new DrakeFactory((containers, options) => {\r\n  return new MockDrake(containers, options);\r\n});\r\n\r\n/** You can use MockDrake to simulate Drake events.\r\n *\r\n * The three methods that actually do anything are `on(event, listener)`,\r\n * `destroy()`, and a new method, `emit()`. Use `emit()` to manually emit Drake\r\n * events, and if you injected MockDrake properly with MockDrakeFactory or\r\n * mocked the DragulaService.find() method, then you can make ng2-dragula think\r\n * drags and drops are happening.\r\n *\r\n * Caveats:\r\n *\r\n * 1. YOU MUST MAKE THE DOM CHANGES YOURSELF.\r\n * 2. REPEAT: YOU MUST MAKE THE DOM CHANGES YOURSELF.\r\n *    That means `source.removeChild(el)`, and `target.insertBefore(el)`.\r\n * 3. None of the other methods do anything.\r\n *    That's ok, because ng2-dragula doesn't use them.\r\n */\r\nexport class MockDrake implements DrakeWithModels {\r\n  /**\r\n   * @param containers A list of container elements.\r\n   * @param options These will NOT be used. At all.\r\n   * @param models Nonstandard, but useful for testing using `new MockDrake()` directly.\r\n   *               Note, default value is undefined, like a real Drake. Don't change that.\r\n   */\r\n  constructor(\r\n    public containers: Element[] = [],\r\n    public options: DragulaOptions = {},\r\n    public models?: any[][]\r\n  ) {}\r\n\r\n  /* Doesn't represent anything meaningful. */\r\n  dragging: boolean = false;\r\n\r\n  /* Does nothing useful. */\r\n  start(item: Element): any {\r\n    this.dragging = true;\r\n  }\r\n  /* Does nothing useful. */\r\n  end(): any {\r\n    this.dragging = false;\r\n  }\r\n  /* Does nothing useful. */\r\n  cancel(revert: boolean): any;\r\n  cancel(): any;\r\n  cancel(revert?: any) {\r\n    this.dragging = false;\r\n  }\r\n  /* Does nothing useful. */\r\n  remove(): any {\r\n    this.dragging = false;\r\n  }\r\n\r\n  // Basic but fully functional event emitter shim\r\n  private emitter$ = new Subject<{ eventType: EventTypes, args: any[] }>();\r\n\r\n  private subs = new Subscription();\r\n\r\n  on(event: string, callback: Function): any {\r\n    this.subs.add(this.emitter$\r\n      .pipe(\r\n        filter(({ eventType }) => eventType === event)\r\n      )\r\n      .subscribe(({ args }) => {\r\n        callback(...args);\r\n      }));\r\n  }\r\n\r\n  destroy(): any {\r\n    this.subs.unsubscribe();\r\n  }\r\n\r\n  /**\r\n   * This is the most useful method. You can use it to manually fire events that would normally\r\n   * be fired by a real drake.\r\n   *\r\n   * You're likely most interested in firing `drag`, `remove` and `drop`, the three events\r\n   * DragulaService uses to implement [dragulaModel].\r\n   *\r\n   * See https://github.com/bevacqua/dragula#drakeon-events for what you should emit (and in what order).\r\n   *\r\n   * (Note also, firing dropModel and removeModel won't work. You would have to mock DragulaService for that.)\r\n   */\r\n  emit(eventType: EventTypes, ...args: any[]) {\r\n    this.emitter$.next({ eventType, args })\r\n  }\r\n\r\n}\r\n"]}