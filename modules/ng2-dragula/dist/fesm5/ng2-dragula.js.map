{"version":3,"file":"ng2-dragula.js.map","sources":["ng://ng2-dragula/Group.ts","ng://ng2-dragula/EventTypes.ts","ng://ng2-dragula/DrakeFactory.ts","ng://ng2-dragula/components/dragula.service.ts","ng://ng2-dragula/components/dragula.directive.ts","ng://ng2-dragula/components/dragula.module.ts","ng://ng2-dragula/MockDrake.ts"],"sourcesContent":["import { DrakeWithModels } from \"./DrakeWithModels\";\r\nimport { DragulaOptions } from \"./DragulaOptions\";\r\n\r\nexport class Group {\r\n  public initEvents: boolean = false;\r\n  constructor(\r\n    public name: string,\r\n    public drake: DrakeWithModels,\r\n    public options: DragulaOptions\r\n  ) {}\r\n}\r\n","export enum EventTypes {\r\n    Cancel = \"cancel\",\r\n    Cloned = \"cloned\",\r\n    Drag = \"drag\",\r\n    DragEnd = \"dragend\",\r\n    Drop = \"drop\",\r\n    Out = \"out\",\r\n    Over = \"over\",\r\n    Remove = \"remove\",\r\n    Shadow = \"shadow\",\r\n    DropModel = \"dropModel\",\r\n    RemoveModel = \"removeModel\",\r\n}\r\n\r\nexport const AllEvents: EventTypes[] = Object.keys(EventTypes).map(k => EventTypes[k as any] as EventTypes);\r\n\r\n\r\n","import { DragulaOptions } from './DragulaOptions';\r\nimport { DrakeWithModels } from './DrakeWithModels';\r\nimport * as dragulaExpt from 'dragula';\r\nexport const dragula: (containers?: any, options?: any) => any = (dragulaExpt as any).default || dragulaExpt;\r\n\r\nexport type DrakeBuilder = (containers: any[], options: DragulaOptions) => DrakeWithModels;\r\n\r\nexport class DrakeFactory {\r\n  constructor (public build: DrakeBuilder = dragula) {}\r\n}\r\n\r\n","import { Injectable, Optional } from '@angular/core';\r\nimport { Group } from '../Group';\r\nimport { DragulaOptions } from '../DragulaOptions';\r\nimport { Subject, Observable } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\nimport { EventTypes, AllEvents } from '../EventTypes';\r\nimport { DrakeFactory } from '../DrakeFactory';\r\n\r\ntype FilterProjector<T extends { name: string; }> = (name: string, args: any[]) => T;\r\ntype Dispatch = { event: EventTypes; name: string; args: any[]; };\r\n\r\nconst filterEvent = <T extends { name: string; }>(\r\n  eventType: EventTypes,\r\n  filterDragType: string | undefined,\r\n  projector: FilterProjector<T>\r\n) => (input: Observable<Dispatch>): Observable<T> => {\r\n  return input.pipe(\r\n    filter(({ event, name }) => {\r\n      return event === eventType\r\n          && (filterDragType === undefined || name === filterDragType);\r\n    }),\r\n    map(({ name, args }) => projector(name, args))\r\n  );\r\n}\r\n\r\nconst elContainerSourceProjector =\r\n  (name: string, [el, container, source]: [Element, Element, Element]) =>\r\n    ({ name, el, container, source });\r\n\r\n@Injectable()\r\nexport class DragulaService {\r\n\r\n  /* https://github.com/bevacqua/dragula#drakeon-events */\r\n\r\n  private dispatch$ = new Subject<Dispatch>();\r\n\r\n  public drag = (groupName?: string) => this.dispatch$.pipe(\r\n    filterEvent(\r\n      EventTypes.Drag,\r\n      groupName,\r\n      (name, [el, source]: [Element, Element]) => ({ name, el, source })\r\n    )\r\n  );\r\n\r\n  public dragend = (groupName?: string) => this.dispatch$.pipe(\r\n    filterEvent(\r\n      EventTypes.DragEnd,\r\n      groupName,\r\n      (name, [el]: [Element]) => ({ name, el })\r\n    )\r\n  );\r\n\r\n  public drop = (groupName?: string) => this.dispatch$.pipe(\r\n    filterEvent(\r\n      EventTypes.Drop,\r\n      groupName,\r\n      (name, [\r\n        el, target, source, sibling\r\n      ]: [Element, Element, Element, Element]) => {\r\n        return { name, el, target, source, sibling };\r\n      })\r\n  );\r\n\r\n  private elContainerSource =\r\n    (eventType: EventTypes) =>\r\n    (groupName?: string) =>\r\n    this.dispatch$.pipe(\r\n      filterEvent(eventType, groupName, elContainerSourceProjector)\r\n    );\r\n\r\n  public cancel = this.elContainerSource(EventTypes.Cancel);\r\n  public remove = this.elContainerSource(EventTypes.Remove);\r\n  public shadow = this.elContainerSource(EventTypes.Shadow);\r\n  public over = this.elContainerSource(EventTypes.Over);\r\n  public out = this.elContainerSource(EventTypes.Out);\r\n\r\n  public cloned = (groupName?: string) => this.dispatch$.pipe(\r\n    filterEvent(\r\n      EventTypes.Cloned,\r\n      groupName,\r\n      (name, [\r\n        clone, original, cloneType\r\n      ]: [Element, Element, 'mirror' | 'copy']) => {\r\n        return { name, clone, original, cloneType }\r\n      })\r\n  );\r\n\r\n  public dropModel = <T = any>(groupName?: string) => this.dispatch$.pipe(\r\n    filterEvent(\r\n      EventTypes.DropModel,\r\n      groupName,\r\n      (name, [\r\n        el, target, source, sibling, item, sourceModel, targetModel, sourceIndex, targetIndex\r\n      ]: [Element, Element, Element, Element, T, T[], T[], number, number]) => {\r\n        return { name, el, target, source, sibling, item, sourceModel, targetModel, sourceIndex, targetIndex }\r\n      })\r\n  );\r\n\r\n  public removeModel = <T = any>(groupName?: string) => this.dispatch$.pipe(\r\n    filterEvent(\r\n      EventTypes.RemoveModel,\r\n      groupName,\r\n      (name, [\r\n        el, container, source, item, sourceModel, sourceIndex\r\n      ]: [Element, Element, Element, T, T[], number]) => {\r\n        return { name, el, container, source, item, sourceModel, sourceIndex }\r\n      }\r\n    )\r\n  );\r\n\r\n  private groups: { [k: string]: Group } = {};\r\n\r\n  constructor (@Optional() private drakeFactory: DrakeFactory = null) {\r\n    if (this.drakeFactory === null) {\r\n      this.drakeFactory = new DrakeFactory();\r\n    }\r\n  }\r\n\r\n  /** Public mainly for testing purposes. Prefer `createGroup()`. */\r\n  public add(group: Group): Group {\r\n    let existingGroup = this.find(group.name);\r\n    if (existingGroup) {\r\n      throw new Error('Group named: \"' + group.name + '\" already exists.');\r\n    }\r\n    this.groups[group.name] = group;\r\n    this.handleModels(group);\r\n    this.setupEvents(group);\r\n    return group;\r\n  }\r\n\r\n  public find(name: string): Group {\r\n    return this.groups[name];\r\n  }\r\n\r\n  public destroy(name: string): void {\r\n    let group = this.find(name);\r\n    if (!group) {\r\n      return;\r\n    }\r\n    group.drake && group.drake.destroy();\r\n    delete this.groups[name];\r\n  }\r\n\r\n  /**\r\n   * Creates a group with the specified name and options.\r\n   *\r\n   * Note: formerly known as `setOptions`\r\n   */\r\n  public createGroup<T = any>(name: string, options: DragulaOptions<T>): Group {\r\n    return this.add(new Group(\r\n      name,\r\n      this.drakeFactory.build([], options),\r\n      options\r\n    ));\r\n  }\r\n\r\n  private handleModels({ name, drake, options }: Group): void {\r\n    let dragElm: any;\r\n    let dragIndex: number;\r\n    let dropIndex: number;\r\n    drake.on('remove', (el: any, container: any, source: any) => {\r\n      if (!drake.models) {\r\n        return;\r\n      }\r\n      let sourceModel = drake.models[drake.containers.indexOf(source)];\r\n      sourceModel = sourceModel.slice(0); // clone it\r\n      const item = sourceModel.splice(dragIndex, 1)[0];\r\n      // console.log('REMOVE');\r\n      // console.log(sourceModel);\r\n      this.dispatch$.next({\r\n        event: EventTypes.RemoveModel,\r\n        name,\r\n        args: [ el, container, source, item, sourceModel, dragIndex ]\r\n      });\r\n    });\r\n    drake.on('drag', (el: any, source: any) => {\r\n      if (!drake.models) {\r\n        return;\r\n      }\r\n      dragElm = el;\r\n      dragIndex = this.domIndexOf(el, source);\r\n    });\r\n    drake.on('drop', (dropElm: any, target: Element, source: Element, sibling?: Element) => {\r\n      if (!drake.models || !target) {\r\n        return;\r\n      }\r\n      dropIndex = this.domIndexOf(dropElm, target);\r\n      let sourceModel = drake.models[drake.containers.indexOf(source)];\r\n      let targetModel = drake.models[drake.containers.indexOf(target)];\r\n      // console.log('DROP');\r\n      // console.log(sourceModel);\r\n      let item: any;\r\n      if (target === source) {\r\n        sourceModel = sourceModel.slice(0)\r\n        item = sourceModel.splice(dragIndex, 1)[0];\r\n        sourceModel.splice(dropIndex, 0, item);\r\n        // this was true before we cloned and updated sourceModel,\r\n        // but targetModel still has the old value\r\n        targetModel = sourceModel;\r\n      } else {\r\n        let isCopying = dragElm !== dropElm;\r\n        item = sourceModel[dragIndex];\r\n        if (isCopying) {\r\n          if (!options.copyItem) {\r\n            throw new Error(\"If you have enabled `copy` on a group, you must provide a `copyItem` function.\")\r\n          }\r\n          item = options.copyItem(item);\r\n        }\r\n\r\n        if (!isCopying) {\r\n          sourceModel = sourceModel.slice(0)\r\n          sourceModel.splice(dragIndex, 1);\r\n        }\r\n        targetModel = targetModel.slice(0)\r\n        targetModel.splice(dropIndex, 0, item);\r\n        if (isCopying) {\r\n          try {\r\n            target.removeChild(dropElm);\r\n          } catch (e) {}\r\n        }\r\n      }\r\n      this.dispatch$.next({\r\n        event: EventTypes.DropModel,\r\n        name,\r\n        args: [ dropElm, target, source, sibling, item, sourceModel, targetModel, dragIndex, dropIndex ]\r\n      });\r\n    });\r\n  }\r\n\r\n  private setupEvents(group: Group): void {\r\n    if (group.initEvents) {\r\n      return;\r\n    }\r\n    group.initEvents = true;\r\n    const name = group.name;\r\n    let that: any = this;\r\n    let emitter = (event: EventTypes) => {\r\n      group.drake.on(event, (...args: any[]) => {\r\n        this.dispatch$.next({ event, name, args });\r\n      });\r\n    };\r\n    AllEvents.forEach(emitter);\r\n  }\r\n\r\n  private domIndexOf(child: any, parent: any): any {\r\n    return Array.prototype.indexOf.call(parent.children, child);\r\n  }\r\n}\r\n","import { Directive, Input, Output, ElementRef, OnInit, OnChanges, OnDestroy, SimpleChange, EventEmitter } from '@angular/core';\r\nimport { DragulaService } from './dragula.service';\r\nimport { DrakeWithModels } from '../DrakeWithModels';\r\nimport { Subscription } from 'rxjs';\r\nimport { Group } from '../Group';\r\n\r\n@Directive({selector: '[dragula]'})\r\nexport class DragulaDirective implements OnChanges, OnDestroy {\r\n  @Input() public dragula: string;\r\n  @Input() public dragulaModel: any[];\r\n  @Output() public dragulaModelChange = new EventEmitter<any[]>();\r\n\r\n  private subs: Subscription;\r\n\r\n  private get container(): HTMLElement {\r\n    return this.el && this.el.nativeElement;\r\n  }\r\n  private group: Group;\r\n\r\n  public constructor(private el: ElementRef, private dragulaService: DragulaService) {\r\n  }\r\n\r\n  public ngOnChanges(changes: {dragula?: SimpleChange, dragulaModel?: SimpleChange}): void {\r\n    if (changes && changes.dragula) {\r\n      const { previousValue: prev, currentValue: current, firstChange } = changes.dragula;\r\n      let hadPreviousValue = !!prev;\r\n      let hasNewValue = !!current;\r\n      // something -> null       =>  teardown only\r\n      // something -> something  =>  teardown, then setup\r\n      //      null -> something  =>  setup only\r\n      //\r\n      //      null -> null (precluded by fact of change being present)\r\n      if (hadPreviousValue) {\r\n        this.teardown(prev);\r\n      }\r\n      if (hasNewValue) {\r\n        this.setup();\r\n      }\r\n    } else if (changes && changes.dragulaModel) {\r\n      // this code only runs when you're not changing the group name\r\n      // because if you're changing the group name, you'll be doing setup or teardown\r\n      // it also only runs if there is a group name to attach to.\r\n      const { previousValue: prev, currentValue: current, firstChange } = changes.dragulaModel;\r\n      const { drake } = this.group;\r\n      if (this.dragula && drake) {\r\n        drake.models = drake.models || [];\r\n        let prevIndex = drake.models.indexOf(prev);\r\n        if (prevIndex !== -1) {\r\n          // delete the previous\r\n          drake.models.splice(prevIndex, 1);\r\n          // maybe insert a new one at the same spot\r\n          if (!!current) {\r\n            drake.models.splice(prevIndex, 0, current);\r\n          }\r\n        } else if (!!current) {\r\n          // no previous one to remove; just push this one.\r\n          drake.models.push(current);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // call ngOnInit 'setup' because we want to call it in ngOnChanges\r\n  // and it would otherwise run twice\r\n  public setup(): void {\r\n    let checkModel = (group: Group) => {\r\n      if (this.dragulaModel) {\r\n        if (group.drake.models) {\r\n          group.drake.models.push(this.dragulaModel);\r\n        } else {\r\n          group.drake.models = [this.dragulaModel];\r\n        }\r\n      }\r\n    };\r\n\r\n    // find or create a group\r\n    let group = this.dragulaService.find(this.dragula);\r\n    if (!group) {\r\n      let options = {};\r\n      group = this.dragulaService.createGroup(this.dragula, options);\r\n    }\r\n\r\n    // ensure model and container element are pushed\r\n    checkModel(group);\r\n    group.drake.containers.push(this.container);\r\n    this.subscribe(this.dragula);\r\n\r\n    this.group = group;\r\n  }\r\n\r\n  public subscribe(name: string) {\r\n    this.subs = new Subscription();\r\n    this.subs.add(\r\n      this.dragulaService\r\n      .dropModel(name)\r\n      .subscribe(({ source, target, sourceModel, targetModel }) => {\r\n        if (source === this.el.nativeElement) {\r\n          this.dragulaModelChange.emit(sourceModel);\r\n        } else if (target === this.el.nativeElement) {\r\n          this.dragulaModelChange.emit(targetModel);\r\n        }\r\n      })\r\n    );\r\n    this.subs.add(\r\n      this.dragulaService\r\n      .removeModel(name)\r\n      .subscribe(({ source, sourceModel }) => {\r\n        if (source === this.el.nativeElement) {\r\n          this.dragulaModelChange.emit(sourceModel);\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  public teardown(groupName: string): void {\r\n    if (this.subs) {\r\n      this.subs.unsubscribe();\r\n    }\r\n    const group = this.dragulaService.find(groupName);\r\n    if (group) {\r\n      const itemToRemove = group.drake.containers.indexOf(this.el.nativeElement);\r\n      if (itemToRemove !== -1) {\r\n        group.drake.containers.splice(itemToRemove, 1);\r\n      }\r\n      if (this.dragulaModel && group.drake && group.drake.models) {\r\n        let modelIndex = group.drake.models.indexOf(this.dragulaModel);\r\n        if (modelIndex !== -1) {\r\n          group.drake.models.splice(modelIndex, 1);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public ngOnDestroy(): void {\r\n    this.teardown(this.dragula);\r\n  }\r\n\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { DragulaDirective } from './dragula.directive';\r\nimport { DragulaService } from './dragula.service';\r\n\r\n@NgModule({\r\n  exports: [DragulaDirective],\r\n  declarations: [DragulaDirective],\r\n})\r\nexport class DragulaModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: DragulaModule,\r\n      providers: [DragulaService]\r\n    }\r\n  }\r\n}\r\n","import { Subject, Subscription } from 'rxjs';\r\nimport { DrakeWithModels } from './DrakeWithModels';\r\nimport { filter } from 'rxjs/operators';\r\nimport { EventTypes } from './EventTypes';\r\nimport { DragulaOptions } from './DragulaOptions';\r\nimport { DrakeFactory } from './DrakeFactory';\r\n\r\nexport const MockDrakeFactory = new DrakeFactory((containers, options) => {\r\n  return new MockDrake(containers, options);\r\n});\r\n\r\n/** You can use MockDrake to simulate Drake events.\r\n *\r\n * The three methods that actually do anything are `on(event, listener)`,\r\n * `destroy()`, and a new method, `emit()`. Use `emit()` to manually emit Drake\r\n * events, and if you injected MockDrake properly with MockDrakeFactory or\r\n * mocked the DragulaService.find() method, then you can make ng2-dragula think\r\n * drags and drops are happening.\r\n *\r\n * Caveats:\r\n *\r\n * 1. YOU MUST MAKE THE DOM CHANGES YOURSELF.\r\n * 2. REPEAT: YOU MUST MAKE THE DOM CHANGES YOURSELF.\r\n *    That means `source.removeChild(el)`, and `target.insertBefore(el)`.\r\n * 3. None of the other methods do anything.\r\n *    That's ok, because ng2-dragula doesn't use them.\r\n */\r\nexport class MockDrake implements DrakeWithModels {\r\n  /**\r\n   * @param containers A list of container elements.\r\n   * @param options These will NOT be used. At all.\r\n   * @param models Nonstandard, but useful for testing using `new MockDrake()` directly.\r\n   *               Note, default value is undefined, like a real Drake. Don't change that.\r\n   */\r\n  constructor(\r\n    public containers: Element[] = [],\r\n    public options: DragulaOptions = {},\r\n    public models?: any[][]\r\n  ) {}\r\n\r\n  /* Doesn't represent anything meaningful. */\r\n  dragging: boolean = false;\r\n\r\n  /* Does nothing useful. */\r\n  start(item: Element): any {\r\n    this.dragging = true;\r\n  }\r\n  /* Does nothing useful. */\r\n  end(): any {\r\n    this.dragging = false;\r\n  }\r\n  /* Does nothing useful. */\r\n  cancel(revert: boolean): any;\r\n  cancel(): any;\r\n  cancel(revert?: any) {\r\n    this.dragging = false;\r\n  }\r\n  /* Does nothing useful. */\r\n  remove(): any {\r\n    this.dragging = false;\r\n  }\r\n\r\n  // Basic but fully functional event emitter shim\r\n  private emitter$ = new Subject<{ eventType: EventTypes, args: any[] }>();\r\n\r\n  private subs = new Subscription();\r\n\r\n  on(event: string, callback: Function): any {\r\n    this.subs.add(this.emitter$\r\n      .pipe(\r\n        filter(({ eventType }) => eventType === event)\r\n      )\r\n      .subscribe(({ args }) => {\r\n        callback(...args);\r\n      }));\r\n  }\r\n\r\n  destroy(): any {\r\n    this.subs.unsubscribe();\r\n  }\r\n\r\n  /**\r\n   * This is the most useful method. You can use it to manually fire events that would normally\r\n   * be fired by a real drake.\r\n   *\r\n   * You're likely most interested in firing `drag`, `remove` and `drop`, the three events\r\n   * DragulaService uses to implement [dragulaModel].\r\n   *\r\n   * See https://github.com/bevacqua/dragula#drakeon-events for what you should emit (and in what order).\r\n   *\r\n   * (Note also, firing dropModel and removeModel won't work. You would have to mock DragulaService for that.)\r\n   */\r\n  emit(eventType: EventTypes, ...args: any[]) {\r\n    this.emitter$.next({ eventType, args })\r\n  }\r\n\r\n}\r\n"],"names":["(/** @type {?} */ (dragulaExpt)).default"],"mappings":"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"}
